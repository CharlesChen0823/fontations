// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

#[allow(unused_imports)]
use crate::codegen_prelude::*;

/// [hhea](https://docs.microsoft.com/en-us/typography/opentype/spec/hhea) Horizontal Header Table
/// [vhea](https://docs.microsoft.com/en-us/typography/opentype/spec/vhea) Vertical Header Table
#[derive(Clone, Debug, Default)]
pub struct HVhea {
    /// Typographic ascent.
    pub ascender: FWord,
    /// Typographic descent.
    pub descender: FWord,
    /// Typographic line gap. Negative LineGap values are treated as
    /// zero in some legacy platform implementations.
    pub line_gap: FWord,
    /// Maximum advance width/height value in 'hmtx'/'vmtx' table.
    pub advance_max: UfWord,
    /// Minimum left/top sidebearing value in 'hmtx'/'vmtx' table for glyphs with
    /// contours (empty glyphs should be ignored).
    pub min_leading_bearing: FWord,
    /// Minimum right/bottom sidebearing value; calculated as min(aw - (lsb +
    /// xMax - xMin)) for horizontal (empty glyphs should be ignored).
    pub min_trailing_bearing: FWord,
    /// Horizontal: max(lsb + (xMax-xMin)); vertical: tsb + (yMax-yMin).
    pub max_extent: FWord,
    /// Used to calculate the slope of the cursor (rise/run); 1 for
    /// vertical caret, 0 for horizontal.
    pub caret_slope_rise: i16,
    /// 0 for vertical caret, 1 for horizontal.
    pub caret_slope_run: i16,
    /// The amount by which a slanted highlight on a glyph needs to be
    /// shifted to produce the best appearance. Set to 0 for
    /// non-slanted fonts
    pub caret_offset: i16,
    /// Number of LongMetric entries in 'hmtx'/'vmtx' table
    pub number_of_long_metrics: u16,
}

impl HVhea {
    /// Construct a new `HVhea`
    #[allow(clippy::too_many_arguments)]
    pub fn new(
        ascender: FWord,
        descender: FWord,
        line_gap: FWord,
        advance_max: UfWord,
        min_leading_bearing: FWord,
        min_trailing_bearing: FWord,
        max_extent: FWord,
        caret_slope_rise: i16,
        caret_slope_run: i16,
        caret_offset: i16,
        number_of_long_metrics: u16,
    ) -> Self {
        Self {
            ascender,
            descender,
            line_gap,
            advance_max,
            min_leading_bearing,
            min_trailing_bearing,
            max_extent,
            caret_slope_rise,
            caret_slope_run,
            caret_offset,
            number_of_long_metrics,
        }
    }
}

impl FontWrite for HVhea {
    #[allow(clippy::unnecessary_cast)]
    fn write_into(&self, writer: &mut TableWriter) {
        (MajorMinor::VERSION_1_0 as MajorMinor).write_into(writer);
        self.ascender.write_into(writer);
        self.descender.write_into(writer);
        self.line_gap.write_into(writer);
        self.advance_max.write_into(writer);
        self.min_leading_bearing.write_into(writer);
        self.min_trailing_bearing.write_into(writer);
        self.max_extent.write_into(writer);
        self.caret_slope_rise.write_into(writer);
        self.caret_slope_run.write_into(writer);
        self.caret_offset.write_into(writer);
        (0 as i16).write_into(writer);
        (0 as i16).write_into(writer);
        (0 as i16).write_into(writer);
        (0 as i16).write_into(writer);
        (0 as i16).write_into(writer);
        self.number_of_long_metrics.write_into(writer);
    }
}

impl Validate for HVhea {
    fn validate_impl(&self, _ctx: &mut ValidationCtx) {}
}

impl<'a> FromObjRef<read_fonts::tables::hvhea::HVhea<'a>> for HVhea {
    fn from_obj_ref(obj: &read_fonts::tables::hvhea::HVhea<'a>, _: FontData) -> Self {
        HVhea {
            ascender: obj.ascender(),
            descender: obj.descender(),
            line_gap: obj.line_gap(),
            advance_max: obj.advance_max(),
            min_leading_bearing: obj.min_leading_bearing(),
            min_trailing_bearing: obj.min_trailing_bearing(),
            max_extent: obj.max_extent(),
            caret_slope_rise: obj.caret_slope_rise(),
            caret_slope_run: obj.caret_slope_run(),
            caret_offset: obj.caret_offset(),
            number_of_long_metrics: obj.number_of_long_metrics(),
        }
    }
}

impl<'a> FromTableRef<read_fonts::tables::hvhea::HVhea<'a>> for HVhea {}

impl<'a> FontRead<'a> for HVhea {
    fn read(data: FontData<'a>) -> Result<Self, ReadError> {
        <read_fonts::tables::hvhea::HVhea as FontRead>::read(data).map(|x| x.to_owned_table())
    }
}
