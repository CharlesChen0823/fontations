// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

use font_types::*;

/// [hhea](https://docs.microsoft.com/en-us/typography/opentype/spec/hhea) Horizontal Header Table
#[derive(Clone, Copy, Debug, zerocopy :: FromBytes, zerocopy :: Unaligned)]
#[repr(C)]
pub struct Hhea {
    /// Major version number of the horizontal header table — set to 1.
    pub major_version: BigEndian<u16>,
    /// Minor version number of the horizontal header table — set to 0.
    pub minor_version: BigEndian<u16>,
    /// Typographic ascent—see note below.
    pub ascender: BigEndian<FWord>,
    /// Typographic descent—see note below.
    pub descender: BigEndian<FWord>,
    /// Typographic line gap. Negative LineGap values are treated as
    /// zero in some legacy platform implementations.
    pub line_gap: BigEndian<FWord>,
    /// Maximum advance width value in 'hmtx' table.
    pub advance_width_max: BigEndian<UfWord>,
    /// Minimum left sidebearing value in 'hmtx' table for glyphs with
    /// contours (empty glyphs should be ignored).
    pub min_left_side_bearing: BigEndian<FWord>,
    /// Minimum right sidebearing value; calculated as min(aw - (lsb +
    /// xMax - xMin)) for glyphs with contours (empty glyphs should be
    /// ignored).
    pub min_right_side_bearing: BigEndian<FWord>,
    /// Max(lsb + (xMax - xMin)).
    pub x_max_extent: BigEndian<FWord>,
    /// Used to calculate the slope of the cursor (rise/run); 1 for
    /// vertical.
    pub caret_slope_rise: BigEndian<i16>,
    /// 0 for vertical.
    pub caret_slope_run: BigEndian<i16>,
    /// The amount by which a slanted highlight on a glyph needs to be
    /// shifted to produce the best appearance. Set to 0 for
    /// non-slanted fonts
    pub caret_offset: BigEndian<i16>,
    /// set to 0
    pub reserved1: BigEndian<i16>,
    /// set to 0
    pub reserved2: BigEndian<i16>,
    /// set to 0
    pub reserved3: BigEndian<i16>,
    /// set to 0
    pub reserved4: BigEndian<i16>,
    /// 0 for current format.
    pub metric_data_format: BigEndian<i16>,
    /// Number of hMetric entries in 'hmtx' table
    pub number_of_h_metrics: BigEndian<u16>,
}

impl Hhea {
    /// Major version number of the horizontal header table — set to 1.
    pub fn major_version(&self) -> u16 {
        self.major_version.get()
    }

    /// Minor version number of the horizontal header table — set to 0.
    pub fn minor_version(&self) -> u16 {
        self.minor_version.get()
    }

    /// Typographic ascent—see note below.
    pub fn ascender(&self) -> FWord {
        self.ascender.get()
    }

    /// Typographic descent—see note below.
    pub fn descender(&self) -> FWord {
        self.descender.get()
    }

    /// Typographic line gap. Negative LineGap values are treated as
    /// zero in some legacy platform implementations.
    pub fn line_gap(&self) -> FWord {
        self.line_gap.get()
    }

    /// Maximum advance width value in 'hmtx' table.
    pub fn advance_width_max(&self) -> UfWord {
        self.advance_width_max.get()
    }

    /// Minimum left sidebearing value in 'hmtx' table for glyphs with
    /// contours (empty glyphs should be ignored).
    pub fn min_left_side_bearing(&self) -> FWord {
        self.min_left_side_bearing.get()
    }

    /// Minimum right sidebearing value; calculated as min(aw - (lsb +
    /// xMax - xMin)) for glyphs with contours (empty glyphs should be
    /// ignored).
    pub fn min_right_side_bearing(&self) -> FWord {
        self.min_right_side_bearing.get()
    }

    /// Max(lsb + (xMax - xMin)).
    pub fn x_max_extent(&self) -> FWord {
        self.x_max_extent.get()
    }

    /// Used to calculate the slope of the cursor (rise/run); 1 for
    /// vertical.
    pub fn caret_slope_rise(&self) -> i16 {
        self.caret_slope_rise.get()
    }

    /// 0 for vertical.
    pub fn caret_slope_run(&self) -> i16 {
        self.caret_slope_run.get()
    }

    /// The amount by which a slanted highlight on a glyph needs to be
    /// shifted to produce the best appearance. Set to 0 for
    /// non-slanted fonts
    pub fn caret_offset(&self) -> i16 {
        self.caret_offset.get()
    }

    /// 0 for current format.
    pub fn metric_data_format(&self) -> i16 {
        self.metric_data_format.get()
    }

    /// Number of hMetric entries in 'hmtx' table
    pub fn number_of_h_metrics(&self) -> u16 {
        self.number_of_h_metrics.get()
    }
}
