// THIS FILE IS AUTOGENERATED.
// Any changes to this file will be overwritten.
// For more information about how codegen works, see font-codegen/README.md

use font_types::*;

pub struct TableDirectory<'a> {
    sfnt_version: zerocopy::LayoutVerified<&'a [u8], BigEndian<u32>>,
    num_tables: zerocopy::LayoutVerified<&'a [u8], BigEndian<u16>>,
    search_range: zerocopy::LayoutVerified<&'a [u8], BigEndian<u16>>,
    entry_selector: zerocopy::LayoutVerified<&'a [u8], BigEndian<u16>>,
    range_shift: zerocopy::LayoutVerified<&'a [u8], BigEndian<u16>>,
    table_records: zerocopy::LayoutVerified<&'a [u8], [TableRecord]>,
}

impl<'a> font_types::FontRead<'a> for TableDirectory<'a> {
    fn read(bytes: &'a [u8]) -> Option<Self> {
        let (sfnt_version, bytes) =
            zerocopy::LayoutVerified::<_, BigEndian<u32>>::new_unaligned_from_prefix(bytes)?;
        let (num_tables, bytes) =
            zerocopy::LayoutVerified::<_, BigEndian<u16>>::new_unaligned_from_prefix(bytes)?;
        let __resolved_num_tables = num_tables.get();
        let (search_range, bytes) =
            zerocopy::LayoutVerified::<_, BigEndian<u16>>::new_unaligned_from_prefix(bytes)?;
        let (entry_selector, bytes) =
            zerocopy::LayoutVerified::<_, BigEndian<u16>>::new_unaligned_from_prefix(bytes)?;
        let (range_shift, bytes) =
            zerocopy::LayoutVerified::<_, BigEndian<u16>>::new_unaligned_from_prefix(bytes)?;
        let (table_records, bytes) =
            zerocopy::LayoutVerified::<_, [TableRecord]>::new_slice_unaligned_from_prefix(
                bytes,
                __resolved_num_tables as usize,
            )?;
        let _bytes = bytes;
        let result = TableDirectory {
            sfnt_version,
            num_tables,
            search_range,
            entry_selector,
            range_shift,
            table_records,
        };
        Some(result)
    }
}

impl<'a> TableDirectory<'a> {
    pub fn sfnt_version(&self) -> u32 {
        self.sfnt_version.get()
    }

    pub fn num_tables(&self) -> u16 {
        self.num_tables.get()
    }

    pub fn search_range(&self) -> u16 {
        self.search_range.get()
    }

    pub fn entry_selector(&self) -> u16 {
        self.entry_selector.get()
    }

    pub fn range_shift(&self) -> u16 {
        self.range_shift.get()
    }

    pub fn table_records(&self) -> &[TableRecord] {
        &self.table_records
    }
}

/// Record for a table in a font.
#[derive(Clone, Copy, Debug, zerocopy :: FromBytes, zerocopy :: Unaligned)]
#[repr(C)]
pub struct TableRecord {
    /// Table identifier.
    pub tag: BigEndian<Tag>,
    /// Checksum for the table.
    pub checksum: BigEndian<u32>,
    /// Offset from the beginning of the font data.
    pub offset: BigEndian<Offset32>,
    /// Length of the table.
    pub len: BigEndian<u32>,
}

impl TableRecord {
    /// Table identifier.
    pub fn tag(&self) -> Tag {
        self.tag.get()
    }

    /// Checksum for the table.
    pub fn checksum(&self) -> u32 {
        self.checksum.get()
    }

    /// Offset from the beginning of the font data.
    pub fn offset(&self) -> Offset32 {
        self.offset.get()
    }

    /// Length of the table.
    pub fn len(&self) -> u32 {
        self.len.get()
    }
}
